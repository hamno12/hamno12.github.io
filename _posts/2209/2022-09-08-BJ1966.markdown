---
layout: post
title: 프린터 큐
date: 2022-09-08 18:34:23 +0900
categories : BAEKJOON 
---
# 카드2

> https://www.acmicpc.net/problem/1966


M에 해당하는 숫자를 -1로 변경 후 M 보다 더 큰 숫자를 큐에 넣어서 해결을 하였다. <br>
Arrays.sort()의 경우 오름차순 정렬이다 보니 Arrays.parallelSort()라는 함수가 있어  <br>
내림차순이겠지 생각을 하고 테스트를 하였더니 틀려버렸다. <br><br>

parallelSort -> java8에 추가된 병렬 배열 정렬<br> 
Fork-Join(작업을 나눈 후 합친다) 이라는 프레임웍이 방식이 작동하여 5000개 이상의 경우 기본 sort보다 빠르다고 한다.<br>


This is code
```java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.*;

public class Main {


    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();

        Queue<Integer> que = new LinkedList();
        Queue<Integer> queMax = new LinkedList();

        int T = Integer.parseInt(br.readLine());

        int[] ary;
        String str;
        int tmp = 0;
        int cnt = 1;

        for (int i = 0; i < T; i++) {
             str = br.readLine();

            int N = Integer.parseInt(str.split(" ")[0]);
            int M = Integer.parseInt(str.split(" ")[1]);

            ary = new int[N];
            cnt = 1;
            tmp = 0;
            que.clear();
            queMax.clear();

            str = br.readLine();

            for (int j = 0; j < N; j++) {
                if (Integer.parseInt(str.split(" ")[j]) > Integer.parseInt(str.split(" ")[M])) {
                    ary[j] = Integer.parseInt(str.split(" ")[j]);
                }
                if (j == M) {
                    que.offer(-1);
                    tmp = Integer.parseInt(str.split(" ")[M]);

                }else{
                    que.offer(Integer.parseInt(str.split(" ")[j]));
                }
            }

            Arrays.sort(ary);

            for (int j = N - 1; j >= 0; j--) {
                if (ary[j] != 0) {
                    queMax.offer(ary[j]);
                }
            }

            while (true){
                if (queMax.size() == 0 && que.peek() == -1)   {
                    System.out.println(cnt);
                    break;
                }else if(que.peek() == queMax.peek()){
                    que.poll();
                    queMax.poll();
                    cnt ++;
                }else if(que.peek() == tmp && queMax.size() == 0){
                    que.poll();
                    cnt ++;
                }else {
                    que.offer(que.poll());
                }
            }
        }
    }
}


```