---
layout: post
title: 듣보잡 
date: 2022-09-08 19:03:23 +0900
categories : BAEKJOON 
---
# 듣보잡

> https://www.acmicpc.net/problem/1764

이진탐색을 이용하여 해결을 하였다.<br>
이진 탐색을 할 경우  Arrays.sort() 를 사용하여 정렬을 주로 사용하였지만 <br>
병합 정렬을 잘 사용하지 않다보니 기억이 가물하여 사용해보았다. <br>
.charAt(0)을 사용하여 비교 후 같을 경우 반복문을 사용하여 해결을 할려고 하였지만<br>
시간초과가 나와 다른 방법을 찾다가 compareTo()를 알게되어 사용하니 해결이 되었다.<br><br>
compareTo() -> 두개의 값을 비교하여 int 값으로 반환해주는 함수<br>
기준 값과 비교대상이 동일한 값일 경우 0 <br>
기준 값이 비교대상 보다 작은 경우 -1 <br>
기준 값이 비교대상 보다 큰 경우 1 <br>



This is code
```java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.*;

public class Main {

    static String[] tmp;
    static String[] result;
    static int cnt = 0;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        String tmp = br.readLine();

        int N = Integer.parseInt(tmp.split(" ")[0]);
        int M = Integer.parseInt(tmp.split(" ")[1]);

        String[] frist = new String[N];
        String[] second = new String[M];
        result = new String[N];

        for (int i = 0; i < N; i++) {
            frist[i] = br.readLine();
        }

        for (int i = 0; i < M; i++) {
            second[i] = br.readLine();
        }

        Array(frist);
        Array(second);

        //Arrays.sort(frist);
        //Arrays.sort(second);

        for (int i = 0; i < frist.length; i++) {
            binarySearch(frist[i] , second);
        }

        bw.write(String.valueOf(cnt));
        bw.newLine();

        for (int i = 0; i < cnt; i++) {
            bw.write(result[i]);
            bw.newLine();
        }

        bw.flush();
        bw.close();

    }

    private static void Array(String[] str){
        tmp = new String[str.length];
        mergeSort(0 , str.length - 1 , str);
    }

    private static void mergeSort(int left, int right, String[] str){

        if (left < right){
            int mid = (left + right) / 2;

            int p = left;
            int q = mid + 1;
            int idx = p;

            mergeSort(left, mid , str);
            mergeSort(mid + 1, right , str);

            while (p <= mid || q <= right){
                if (q > right || (p <= mid && str[p].compareTo(str[q])  < 0 )){
                    tmp[idx++] = str[p++];
                }else {
                    tmp[idx++] = str[q++];
                }
            }
            for (int i = left; i <= right; i++){
                str[i] = tmp[i];
            }
        }
    }

    private static void binarySearch(String target, String[] str ){
        int left = 0;
        int right = str.length - 1;
        int mid = (left + right) / 2;

        while (left <= right){
            if(target.equals(str[mid])){
                result[cnt] = target;
                cnt ++ ;
                break;
            }else if(str[mid].compareTo(target) > 0 ){
                right = mid - 1;
            }else{
                left = mid + 1;
            }
            mid = (left + right) / 2;
        }
    }
}


```