---
layout: post
title: DFS와 BFS
date: 2022-09-14 23:13:23 +0900
categories : BAEKJOON 
---
# DFS와 BFS

> https://www.acmicpc.net/problem/1260




This is code
```java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.*;

public class Main {

    static int[] bfsArray;
    static int[] dfsArray;
    static boolean[] visit;
    static int cnt = 0;

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer tmp = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(tmp.nextToken());
        int M = Integer.parseInt(tmp.nextToken());
        int V = Integer.parseInt(tmp.nextToken());

        int[][] ary = new int[N + 1][N + 1];
        visit = new boolean[N + 1];
        bfsArray = new int[N];
        dfsArray = new int[N];
        int X = 0;
        int Y = 0;

        for (int i = 0; i < M; i++) {
            tmp = new StringTokenizer(br.readLine());
            X = Integer.parseInt(tmp.nextToken());
            Y = Integer.parseInt(tmp.nextToken());

            ary[X][Y] = ary[Y][X] = 1;
            
        }
        cnt = 0;
        DFS(ary, V);
        for (int i = 0; i < dfsArray.length; i++) {
            if(dfsArray[i] != 0){
                bw.write(Integer.parseInt(String.valueOf(dfsArray[i])) + " ");
            }
        }
        

        visit = new boolean[N + 1];
        bw.newLine();

        BFS(ary, V);
        
        for (int i = 0; i < bfsArray.length; i++) {
            if(bfsArray[i] != 0){
                bw.write(Integer.parseInt(String.valueOf(bfsArray[i])) + " ");
            }
            
        }

        bw.flush();
        bw.close();

    }

    static void BFS(int[][] ary, int V){
        Queue queue = new LinkedList<>();
        queue.offer(V);
        int i = 0;
        bfsArray[i++] = V;
        visit[V] = true;

        while(queue.isEmpty() == false){
            V = (int)queue.poll();
            
            for (int j = 1; j < ary.length; j++) {
                if (ary[V][j] == 1 && visit[j] == false) {
                    bfsArray[i++] = j;
                    queue.offer(j);
                    visit[j] = true;
                }
            }
        }
        
    }

    static void DFS(int[][] ary, int V){
        
        if (visit[V] == false) {
            dfsArray[cnt++] = V;
            visit[V] = true;
        }

        for (int j = 1; j < ary.length; j++) {
            if (ary[V][j] == 1 && visit[j] == false) {
                dfsArray[cnt++] = j;
                visit[j] = true;
                DFS(ary, j);
            }
        }
    }

}


```